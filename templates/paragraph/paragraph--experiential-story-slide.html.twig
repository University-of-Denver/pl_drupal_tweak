{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    'paragraph--slide-style--' ~ content.field_slide_style.0['#markup'],
    'story-slide',
  ]
%}

{% set slide = {
    'video': file_url(content.field_slide_media.0['#paragraph'].fields.field_slide_video.0.entity.uri.value)|render,
    'image': content.field_slide_media.0['#paragraph'].fields.field_slide_image.0.entity.uri.value|render ? file_url(content.field_slide_media.0['#paragraph'].fields.field_slide_image.0.entity.uri.value)|render : null,
    'img_alt': content.field_slide_media.0['#paragraph'].fields.field_slide_image.alt,
    'media': content.field_slide_media.0,
    'text': content.field_story_slide_text.0,
    'style': content.field_slide_style.0['#markup'],
    'cta': content.field_slide_cta.0
  }
%}

{% set slide_image = {
    '#type': 'responsive_image',
    '#responsive_image_style_id': 'experiential_slide_image',
    '#uri': content.field_slide_media.0['#paragraph'].fields.field_slide_image.0.entity.uri.value|render,
    '#height': content.field_slide_media.0['#paragraph'].fields.field_slide_image.0.height|render,
    '#width': content.field_slide_media.0['#paragraph'].fields.field_slide_image.0.width|render,
    '#attributes': { 'alt': slide.img_alt },
} %}


{{ content|without('field_slide_style', 'field_slide_cta', 'field_slide_media', 'field_story_slide_text' ) }}

{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
  {% if slide.style == "end_slide" %}
    <div class="center-content">
      <img src="/themes/custom/pl_drupal/images/logo.png" />
      <div class="slide-content">
        {{ slide.text }}
        <div class="slide-actions">
          <a class="icon-du icon-redo-alt-left back-to-beginning" href="#">Read Again</a>
          <input type="hidden" id="input-url" value="Copied!">
          <div class="slide-tooltip">
            <button class="btn-copy icon-du icon-share-square">
              <span class="tooltiptext" id="slideTooltip">Copy URL to clipboard</span>
              Copy
            </button>
          </div>
        </div>
      </div>
    </div>
  {% else %}
    <div class="slide-media">
      {% if slide.video is not empty %}
        <div class="full-screen-video fit-vids-style">
          <video muted="true" onloadedmetadata="this.muted = true" autoplay="autoplay" loop="true"  id="" class="lazy-hidden hero-video--visible">
            <source src="{{ slide.video }}" type="video/mp4">
          </video>
        </div>
      {% elseif slide.image %}
        {{ slide_image }}
      {% endif %}
    </div>
    <div class="slide-content-wrapper">
      <div class="slide-content">
        {{ slide.text }}
      </div>
    </div>
  </div>
  {% if slide.style == "cover_slide" %}
    <div class="mobile-swipe-icon"><span class="icon-du icon-hand-pointer-o">Swipe</span></div>
  {% endif %}
  {% endif %}
{% endblock %}
