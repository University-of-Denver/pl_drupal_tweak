{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

{% embed  "@organisms/article.twig" %}
    {% set createdDate = node.getCreatedTime|date('Y-m-d\TH:i:sO') %}
    {% block page_title %}
        {% include "@atoms/headline.twig" with {'title' : label, 'type' : 'h1'} %}
    {% endblock %}
    {% set author_list = content.field_article_byline_author|field_value %}
    {% set author_title = "Author(s)" %}
    {% block article_author_list %}
        {% for article_author in author_list %}
            {{ article_author }}
        {% endfor %}
    {% endblock %}
    {% set subhead = {"title": content.field_article_subhead|field_value} %}
    {% block page_subtitle %}
        {% include "@atoms/headline.twig" with subhead %}
    {% endblock %}
    {% set article_type = content.field_article_type|field_value %}
    {% set publish_date = content.field_article_publish_date|field_value %}
    {% set overview = content.field_page_overview %}
    {% set article_content = content.field_page_content %}
    {% set comment = content.field_article_comment %}
    {% set related_list = content.field_article_related|field_value %}
    {% set related_title = {'title' : "Related Articles", 'type' : 'h2', 'cssClass' : 'btm-divider'} %}

    {% if content.field_back_link_text|render|trim is not empty %}
      {% set back_to_parent = {"link": article_list_location, "title": content.field_back_link_text|field_value } %}
    {% else %}
      {% set back_to_parent = {"link": article_list_location, "title": "Back to Article Listing" } %}
    {% endif %}

    {% set schema_title = node.label|striptags %}
    {% set author_name = content.field_article_byline_author.0['#taxonomy_term'].name.value %}
    {% set base_url = render_var(url('<front>'))  %}
    {% set node_path = path('entity.node.canonical', {'node': node.id }) %}
    {% set logo = base_url|trim('/', 'right') ~ '/themes/custom/pl_unit/images/logo_shield_unit.png' %}
    {% set canonical = base_url|trim('/', 'right') ~ node_path %}
    {% set featured_media = feature_image %}
    {% set medium_image = node.field_article_medium_sized_image.entity %}
    {% set thumb_image = node.field_article_thumbnail_image.entity %}
    {% if thumb_image %}
        {% set featured_thumbnail = base_url|trim('/', 'right') ~ file_url(thumb_image.fileuri) %}
    {% endif %}
    {% if medium_image %}
        {% set featured_medium = base_url|trim('/', 'right') ~ file_url(medium_image.fileuri) %}
    {% endif %}
    {% set description = node.fields.field_article_teaser.value|render|striptags %}
{% endembed %}



